package br.com.renovar.modelo;

// Generated 26/01/2015 16:56:39 by Hibernate Tools 4.3.1

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Visita generated by hbm2java
 */
@Entity
@Table(name = "VISITA", catalog = "renovar")
public class Visita implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8109098466859435417L;
	private int visId;
	private Cliente cliente;
	private Funcionario funcionario;
	private Date visDataAgendadaInicio;
	private Date visDataAgendadaFim;
	private Date visDataCadastrada;
	private Date visDataVisita;
	private String visMotivo;
	private String visPosVisita;

	public Visita() {
	}

	public Visita(int visId, Cliente cliente, Funcionario funcionario) {
		this.visId = visId;
		this.cliente = cliente;
		this.funcionario = funcionario;
	}

	public Visita(int visId, Cliente cliente, Funcionario funcionario,
			Date visDataAgendadaInicio, Date visDataAgendadaFim,Date visDataCadastrada, Date visDataVisita,
			String visMotivo, String visPosVisita) {
		this.visId = visId;
		this.cliente = cliente;
		this.funcionario = funcionario;
		this.visDataAgendadaInicio = visDataAgendadaInicio;
		this.visDataAgendadaFim = visDataAgendadaFim;
		this.visDataCadastrada = visDataCadastrada;
		this.visDataVisita = visDataVisita;
		this.visMotivo = visMotivo;
		this.visPosVisita = visPosVisita;
	}

	@Id
	@GeneratedValue
	@Column(name = "VIS_ID", unique = true, nullable = false)
	public int getVisId() {
		return this.visId;
	}

	public void setVisId(int visId) {
		this.visId = visId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PES_ID", nullable = false)
	public Cliente getCliente() {
		return this.cliente;
	}

	public void setCliente(Cliente cliente) {
		this.cliente = cliente;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FUN_PES_ID", nullable = false)
	public Funcionario getFuncionario() {
		return this.funcionario;
	}

	public void setFuncionario(Funcionario funcionario) {
		this.funcionario = funcionario;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "VIS_DATA_AGENDADA_INICIO", length = 23)
	public Date getVisDataAgendadaInicio() {
		return this.visDataAgendadaInicio;
	}

	public void setVisDataAgendadaInicio(Date visDataAgendadaInicio) {
		this.visDataAgendadaInicio = visDataAgendadaInicio;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "VIS_DATA_AGENDADA_FIM", length = 23)
	public Date getVisDataAgendadaFim() {
		return this.visDataAgendadaFim;
	}

	public void setVisDataAgendadaFim(Date visDataAgendadaFim) {
		this.visDataAgendadaFim = visDataAgendadaFim;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "VIS_DATA_CADASTRADA", length = 23)
	public Date getVisDataCadastrada() {
		return this.visDataCadastrada;
	}

	public void setVisDataCadastrada(Date visDataCadastrada) {
		this.visDataCadastrada = visDataCadastrada;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "VIS_DATA_VISITA", length = 23)
	public Date getVisDataVisita() {
		return this.visDataVisita;
	}

	public void setVisDataVisita(Date visDataVisita) {
		this.visDataVisita = visDataVisita;
	}

	@Column(name = "VIS_MOTIVO", length = 251)
	public String getVisMotivo() {
		return this.visMotivo;
	}

	public void setVisMotivo(String visMotivo) {
		this.visMotivo = visMotivo;
	}

	@Column(name = "VIS_POS_VISITA", length = 251)
	public String getVisPosVisita() {
		return this.visPosVisita;
	}

	public void setVisPosVisita(String visPosVisita) {
		this.visPosVisita = visPosVisita;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((cliente == null) ? 0 : cliente.hashCode());
		result = prime * result
				+ ((funcionario == null) ? 0 : funcionario.hashCode());
		result = prime
				* result
				+ ((visDataAgendadaFim == null) ? 0 : visDataAgendadaFim
						.hashCode());
		result = prime
				* result
				+ ((visDataAgendadaInicio == null) ? 0 : visDataAgendadaInicio
						.hashCode());
		result = prime
				* result
				+ ((visDataCadastrada == null) ? 0 : visDataCadastrada
						.hashCode());
		result = prime * result
				+ ((visDataVisita == null) ? 0 : visDataVisita.hashCode());
		result = prime * result + visId;
		result = prime * result
				+ ((visMotivo == null) ? 0 : visMotivo.hashCode());
		result = prime * result
				+ ((visPosVisita == null) ? 0 : visPosVisita.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Visita other = (Visita) obj;
		if (cliente == null) {
			if (other.cliente != null)
				return false;
		} else if (!cliente.equals(other.cliente))
			return false;
		if (funcionario == null) {
			if (other.funcionario != null)
				return false;
		} else if (!funcionario.equals(other.funcionario))
			return false;
		if (visDataAgendadaFim == null) {
			if (other.visDataAgendadaFim != null)
				return false;
		} else if (!visDataAgendadaFim.equals(other.visDataAgendadaFim))
			return false;
		if (visDataAgendadaInicio == null) {
			if (other.visDataAgendadaInicio != null)
				return false;
		} else if (!visDataAgendadaInicio.equals(other.visDataAgendadaInicio))
			return false;
		if (visDataCadastrada == null) {
			if (other.visDataCadastrada != null)
				return false;
		} else if (!visDataCadastrada.equals(other.visDataCadastrada))
			return false;
		if (visDataVisita == null) {
			if (other.visDataVisita != null)
				return false;
		} else if (!visDataVisita.equals(other.visDataVisita))
			return false;
		if (visId != other.visId)
			return false;
		if (visMotivo == null) {
			if (other.visMotivo != null)
				return false;
		} else if (!visMotivo.equals(other.visMotivo))
			return false;
		if (visPosVisita == null) {
			if (other.visPosVisita != null)
				return false;
		} else if (!visPosVisita.equals(other.visPosVisita))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Visita [visId=" + visId + "]";
	}

}
